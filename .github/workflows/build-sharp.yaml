name: SPT Release Build - C#

on:
  workflow_dispatch:
    inputs:
      buildTag:
        description: "The tag to build on"
        required: true
        type: string

concurrency:
  group: spt-release-build-sharp
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.1.0
    outputs:
      proceed: ${{ steps.check-existence.outputs.proceed }}
      branch_server: ${{ steps.determine-context.outputs.branch_server }}
      branch_modules: ${{ steps.determine-context.outputs.branch_modules }}
      branch_launcher: ${{ steps.determine-context.outputs.branch_launcher }}
      target_tag: ${{ steps.determine-context.outputs.target_tag }}
      build_type: ${{ steps.determine-build-type.outputs.build_type }}
      client_version: ${{ steps.versions.outputs.client_version }}
      spt_version: ${{ steps.versions.outputs.spt_version }}
      build_config: ${{ steps.determine-build-type.outputs.build_config }}
      nuget_version: ${{ steps.nuget-version.outputs.nuget_version }}

    steps:
      - name: Determine Build Context
        id: determine-context
        shell: bash
        run: |
          echo "Determining build context..."

          # Determine the tag based on the event type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_NAME="${{ github.event.inputs.buildTag }}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            TAG_NAME="${{ github.event.client_payload.tag }}"
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

          if [[ -z "$TAG_NAME" ]]; then
            echo "No tag provided in event payload."
            exit 1
          fi

          echo "target_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Target tag is $TAG_NAME"

      - name: Determine Build Type
        id: determine-build-type
        shell: bash
        run: |
          TARGET_TAG="${{ steps.determine-context.outputs.target_tag }}"
          TARGET_TAG_UPPER="${TARGET_TAG^^}"

          BUILD_TYPE="DEBUG"
          if [[ "$TARGET_TAG_UPPER" =~ -BEM ]]; then
            BUILD_TYPE="BLEEDINGEDGEMODS"
          elif [[ "$TARGET_TAG_UPPER" =~ -BE ]]; then
            BUILD_TYPE="BLEEDINGEDGE"
          elif [[ "$TARGET_TAG_UPPER" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            BUILD_TYPE="RELEASE"
          fi

          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "Build type is $BUILD_TYPE"

          # Set build configuration based on build type
          if [ "$BUILD_TYPE" = "RELEASE" ] || [ "$BUILD_TYPE" = "BLEEDINGEDGEMODS" ]; then
            BUILD_CONFIG="Release"
          else
            BUILD_CONFIG="Debug"
          fi
          echo "build_config=$BUILD_CONFIG" >> $GITHUB_OUTPUT
          echo "Build config is $BUILD_CONFIG"

      - name: Check Existence
        id: check-existence
        shell: bash
        run: |
          PROCEED="true"
          TAG="${{ steps.determine-context.outputs.target_tag }}"
          REPOS=("https://${{ secrets.SERVER_CSHARP_TOKEN }}@github.com/sp-tarkov/server-csharp.git" "https://github.com/sp-tarkov/modules.git" "https://github.com/sp-tarkov/launcher.git")
          for REPO in "${REPOS[@]}"; do
            echo "Checking for tag $TAG in $REPO..."
            if ! git ls-remote --tags $REPO $TAG | grep -q $TAG; then
              echo "Tag $TAG not found in $REPO"
              PROCEED="false"
              break
            fi
          done
          echo "proceed=$PROCEED" >> $GITHUB_OUTPUT

      - name: Tag Not Found
        if: steps.check-existence.outputs.proceed == 'false'
        run: |
          echo "Required branch/tag not found in one or more repositories, halting workflow."
          exit 1

      - name: Extract Versions
        id: versions
        shell: bash
        env:
          TARGET_TAG: ${{ steps.determine-context.outputs.target_tag }}
        run: |
          rm -rf /workspace/SPT/Build/server-csharp-core
          git init /workspace/SPT/Build/server-csharp-core
          cd /workspace/SPT/Build/server-csharp-core
          git remote add origin https://${{ secrets.SERVER_CSHARP_TOKEN }}@github.com/sp-tarkov/server-csharp.git
          git config core.sparseCheckout true
          echo "Libraries/SPTarkov.Server.Assets/SPT_Data/configs/core.json" >> .git/info/sparse-checkout

          git fetch --depth=1 origin "$TARGET_TAG"
          git checkout FETCH_HEAD

          cd Libraries/SPTarkov.Server.Assets/SPT_Data/configs
          FULL_VERSION=$(jq -r '.compatibleTarkovVersion' core.json)
          
          CLIENT_VERSION=${FULL_VERSION##*.}
          SPT_VERSION="${TARGET_TAG%%-*}"

          echo "client_version=$CLIENT_VERSION" >> $GITHUB_OUTPUT
          echo "spt_version=$SPT_VERSION" >> $GITHUB_OUTPUT

          echo "Client version is $CLIENT_VERSION"
          echo "SPT version is $SPT_VERSION"

      - name: Generate NuGet Package Version
        id: nuget-version
        shell: bash
        run: |
          TARGET_TAG="${{ steps.determine-context.outputs.target_tag }}"
          SPT_VERSION="${{ steps.versions.outputs.spt_version }}"
          BUILD_TYPE="${{ steps.determine-build-type.outputs.build_type }}"

          # For release builds, use simple version number without pre-release suffix
          if [ "$BUILD_TYPE" = "RELEASE" ]; then
            NUGET_VERSION="$SPT_VERSION"
            echo "Release build detected - using simple version: $NUGET_VERSION"
          else
            # For non-release builds, use pre-release format with date
            # Extract the date, look for 8-digit date pattern (YYYYMMDD) at the end of the tag
            DATE_PART=$(echo "$TARGET_TAG" | grep -oE '[0-9]{8}$' || echo "")

            # Check if we found a valid date pattern
            if [[ -n "$DATE_PART" && "$DATE_PART" =~ ^[0-9]{8}$ ]]; then
              # Add current hour and minutes to the extracted date
              CURRENT_TIME=$(date +%H%M)
              NUGET_VERSION="${SPT_VERSION}-pre.${DATE_PART}${CURRENT_TIME}"
              echo "Pre-release build detected - extracted date from tag with time: ${DATE_PART}.${CURRENT_TIME}"
            else
              # Fallback to current date and time if no date pattern found in tag
              CURRENT_DATE=$(date +%Y%m%d)
              CURRENT_TIME=$(date +%H%M)
              NUGET_VERSION="${SPT_VERSION}-pre.${CURRENT_DATE}${CURRENT_TIME}"
              echo "Pre-release build detected - no date in tag, using current date and time: ${CURRENT_DATE}.${CURRENT_TIME}"
            fi
            echo "Pre-release version: $NUGET_VERSION"
          fi

          echo "nuget_version=$NUGET_VERSION" >> $GITHUB_OUTPUT
          echo "NuGet package version: $NUGET_VERSION"

  build-server:
    needs: prepare
    if: needs.prepare.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.1.0
    outputs:
      server_commit: ${{ steps.commit-hash.outputs.server_commit }}
    steps:
      - name: Clone Server
        shell: bash
        run: |
          serverPath="$GITHUB_WORKSPACE/SPT/Build/server-csharp"

          # Delete old remnants of the last build.
          if [ -d "$serverPath" ]; then
              rm -rf "$serverPath"
          fi

          TARGET="${{ needs.prepare.outputs.target_tag }}"
  
          echo "Cloning target: $TARGET"
          git clone https://${{ secrets.SERVER_CSHARP_TOKEN }}@github.com/sp-tarkov/server-csharp.git --branch "$TARGET" --depth 1 "$serverPath"
  
          # Pull LFS files.
          cd "$serverPath"
          git lfs install --local
          git lfs pull

      - name: Output Commit Hash
        id: commit-hash
        shell: bash
        run: echo "server_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        working-directory: SPT/Build/server-csharp

      - name: Publish Server
        shell: bash
        run: |
          PLATFORMS=("win-x64" "linux-x64")
          for PLATFORM in "${PLATFORMS[@]}"; do
            echo "Publishing server for '$PLATFORM'..."
            dotnet publish ./SPTarkov.Server/SPTarkov.Server.csproj \
            -c ${{ needs.prepare.outputs.build_config }} \
            -f net9.0 \
            -r $PLATFORM \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishSingleFile=false \
            --self-contained false \
            -p:SptBuildType=${{ needs.prepare.outputs.build_type }} \
            -p:SptVersion=${{ needs.prepare.outputs.spt_version }} \
            -p:SptBuildTime=$( date +%Y%m%d ) \
            -p:SptCommit=${{ steps.commit-hash.outputs.server_commit }} \
            -p:IsPublish=true
          done
        working-directory: SPT/Build/server-csharp

      - name: Upload Server Artifact - Windows
        uses: actions/upload-artifact@v4
        with:
          name: server-artifact-win-x64
          path: |
            SPT/Build/server-csharp/SPTarkov.Server/bin/${{ needs.prepare.outputs.build_config }}/net9.0/win-x64/publish/
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: error

      - name: Upload Server Artifact - Linux
        uses: actions/upload-artifact@v4
        with:
          name: server-artifact-linux-x64
          path: |
            SPT/Build/server-csharp/SPTarkov.Server/bin/${{ needs.prepare.outputs.build_config }}/net9.0/linux-x64/publish/
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: error

      - name: Create NuGet Packages
        shell: bash
        run: |
          mkdir -p ./packages/
          dotnet pack -o ./packages/ -c ${{ needs.prepare.outputs.build_config }} /p:Version=${{ needs.prepare.outputs.nuget_version }}
          echo "NuGet packages created with version ${{ needs.prepare.outputs.nuget_version }}"
        working-directory: SPT/Build/server-csharp

      - name: Publish NuGet Packages
        continue-on-error: true
        shell: bash
        run: |
          PACKAGES=("SPTarkov.Common" "SPTarkov.DI" "SPTarkov.Reflection" "SPTarkov.Server.Assets" "SPTarkov.Server.Web" "SPTarkov.Server.Core")
          VERSION="${{ needs.prepare.outputs.nuget_version }}"

          for PACKAGE in "${PACKAGES[@]}"; do
            PACKAGE_FILE="./packages/${PACKAGE}.${VERSION}.nupkg"
            if [ -f "$PACKAGE_FILE" ]; then
              echo "Publishing $PACKAGE_FILE..."
              if dotnet nuget push "$PACKAGE_FILE" --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json; then
                echo "Successfully published $PACKAGE"
              else
                echo "Failed to publish $PACKAGE"
              fi
            else
              echo "Warning: Package file $PACKAGE_FILE not found, skipping."
            fi
          done
          echo "NuGet package publishing completed."
        working-directory: SPT/Build/server-csharp

  build-modules:
    needs: prepare
    if: needs.prepare.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.1.0
    steps:
      - name: Clone Modules
        id: clone-modules
        shell: bash
        run: |
          rm -rf /workspace/SPT/Build/modules

          TAG=${{ needs.prepare.outputs.target_tag }}
          echo "Cloning modules from tag $TAG"
          git clone https://github.com/sp-tarkov/modules.git --branch "$TAG" --depth 1 /workspace/SPT/Build/modules

          cd /workspace/SPT/Build/modules
          echo "modules_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download Client Module Package
        shell: bash
        run: |
          DIR_MANAGED="/workspace/SPT/Build/modules/project/Shared/Managed"
          DOWNLOAD_PATH="$DIR_MANAGED/${{ needs.prepare.outputs.client_version }}.7z"
          DOWNLOAD_URL="${{ secrets.MODULE_DOMAIN }}/${{ needs.prepare.outputs.client_version }}.7z"
          echo "Downloading Client Module Package from $DOWNLOAD_URL to $DOWNLOAD_PATH"
          mkdir -p "$DIR_MANAGED"
          wget -q -O "$DOWNLOAD_PATH" "$DOWNLOAD_URL" || {
            echo "Failed to download the module package."
            exit 1
          }
          if [ ! -s "$DOWNLOAD_PATH" ]; then
            echo "The module package does not exist or is empty."
            exit 1
          fi
          echo "Download Successful: $DOWNLOAD_PATH"

      - name: Decompress Client Module Package
        shell: bash
        run: |
          cd /workspace/SPT/Build/modules/project/Shared/Managed
          7z x ${{ needs.prepare.outputs.client_version }}.7z -aoa
          echo "Client module package decompressed."

      - name: Delete Client Module Package
        shell: bash
        run: |
          cd /workspace/SPT/Build/modules/project/Shared/Managed
          rm -f ${{ needs.prepare.outputs.client_version }}.7z
          echo "Client module package deleted."

      - name: Build Modules
        shell: bash
        run: |
          cd /workspace/SPT/Build/modules/project
          dotnet build -c Release -p:Version=${{ needs.prepare.outputs.spt_version }}
          printf "\nBuilt!\n\n"

      - name: Upload Modules Artifact
        uses: actions/upload-artifact@v4
        with:
          name: modules-artifact
          path: /workspace/SPT/Build/modules/project/Build
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: error

  build-launcher:
    needs: prepare
    if: needs.prepare.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.0.2
    steps:
      - name: Clone Launcher
        id: clone-launcher
        shell: bash
        run: |
          rm -rf /workspace/SPT/Build/launcher

          TAG=${{ needs.prepare.outputs.target_tag }}
          echo "Cloning launcher from tag $TAG"
          git clone https://github.com/sp-tarkov/launcher.git --branch "$TAG" --depth 1 /workspace/SPT/Build/launcher

          cd /workspace/SPT/Build/launcher
          echo "launcher_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Launcher
        shell: bash
        run: |
          cd /workspace/SPT/Build/launcher/project
          dotnet build
          printf "\nBuilt!\n\n"

      - name: Upload Launcher Artifact
        uses: actions/upload-artifact@v4
        with:
          name: launcher-artifact
          path: /workspace/SPT/Build/launcher/project/Build
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: error

  assemble-and-publish:
    needs: [prepare, build-server, build-modules, build-launcher]
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.1.0
    steps:
      - name: Clean Directory
        shell: bash
        run: |
          rm -rf release build
          mkdir -p release/SPT

      - name: Download Server Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: server-artifact*
          path: release/SPT
          merge-multiple: true

      - name: Download Launcher Artifacts
        uses: actions/download-artifact@v4
        with:
          name: launcher-artifact
          path: release/SPT
          merge-multiple: true

      - name: Download Module Artifacts
        uses: actions/download-artifact@v4
        with:
          name: modules-artifact
          path: release/
          merge-multiple: true

      - name: Remove Unnecessary Files
        shell: bash
        run: |
          find release -name "web.config" -type f -delete
          find release -name "SPT.Server.staticwebassets.endpoints.json" -type f -delete
          find release -name "SPT.Server.Linux.staticwebassets.endpoints.json" -type f -delete
          find release -maxdepth 1 -name "*.xml" -type f -delete

      - name: Update File Permissions
        shell: bash
        run: |
          find release -name "SPT.Server.Linux" -type f -exec chmod +x {} \;

      - name: Clone Build Project
        uses: actions/checkout@v4
        with:
          repository: sp-tarkov/build
          path: build

      - name: Merge Static Assets and Dynamic Files
        shell: bash
        run: cp -rvf build/static-assets-csharp/. release/

      - name: List Release Contents
        shell: bash
        run: tree -a release

      - name: Generate Release Filename
        id: generate-filename
        shell: bash
        run: |
          BUILD_TYPE=${{ needs.prepare.outputs.build_type }}
          SPT_VERSION=${{ needs.prepare.outputs.spt_version }}
          CLIENT_VERSION=${{ needs.prepare.outputs.client_version }}
          SERVER_COMMIT=${{ needs.build-server.outputs.server_commit }}
          TARGET_TAG=${{ needs.prepare.outputs.target_tag }}
          DATE=$(date +%Y%m%d)

          UPPER_BUILD_TYPE=$(echo "$BUILD_TYPE" | tr '[:lower:]' '[:upper:]')
          UPPER_TARGET_TAG=$(echo "$TARGET_TAG" | tr '[:lower:]' '[:upper:]')

          if [ "$BUILD_TYPE" = "RELEASE" ]; then
            BASE_NAME="SPT-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}"
          else
            TAG_PART=""
            if [[ "$UPPER_TARGET_TAG" == *-*-* ]]; then
              SUFFIX="${UPPER_TARGET_TAG##*-}"
              if [ "$SUFFIX" != "$UPPER_TARGET_TAG" ]; then
                TAG_PART="-${SUFFIX}"
              fi
            fi
            if [ -n "$TAG_PART" ]; then
              BASE_NAME="SPT-${UPPER_BUILD_TYPE}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}${TAG_PART}"
            else
              BASE_NAME="SPT-${UPPER_BUILD_TYPE}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${DATE}"
            fi
          fi

          echo "base_name=$BASE_NAME" >> $GITHUB_OUTPUT
          echo "build_name=${BASE_NAME}.7z" >> $GITHUB_OUTPUT

          echo "Release filename: ${BASE_NAME}.7z"

      - name: Compress Release
        id: compress-release
        shell: bash
        run: |
          cd release
          7z a -mx=9 -m0=lzma2 "../${{ steps.generate-filename.outputs.build_name }}" .
          echo "Release compressed as ${{ steps.generate-filename.outputs.build_name }}."

          FILE_SIZE_MB=$(stat -c %s "../${{ steps.generate-filename.outputs.build_name }}" | awk '{printf "%.2f MB", $1 / 1024 / 1024}')
          FILE_HASH=$(md5sum "../${{ steps.generate-filename.outputs.build_name }}" | awk '{print $1}' | xxd -r -p | base64)

          echo "file_size_mb=$FILE_SIZE_MB" >> $GITHUB_OUTPUT
          echo "file_hash=$FILE_HASH" >> $GITHUB_OUTPUT

      - name: R2 Upload
        if: needs.prepare.outputs.build_type == 'Release'
        env:
          SPT_VERSION: ${{ needs.prepare.outputs.spt_version }}
          CLIENT_VERSION: ${{ needs.prepare.outputs.client_version }}
          FILE_HASH: ${{ steps.compress-release.outputs.file_hash }}
          R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_FRONT: ${{ secrets.R2_FRONT }}
        shell: bash
        run: |
          # Configure Rclone
          echo '[r2]
          type = s3
          provider = Cloudflare
          access_key_id = '"$R2_ACCESS_KEY"'
          secret_access_key = '"$R2_SECRET_ACCESS_KEY"'
          region = auto
          endpoint = '"$R2_ENDPOINT"'
          acl = public-read' > ./rclone.conf

          # Generate Release JSON File
          echo "{
            \"AkiVersion\": \"${SPT_VERSION}\",
            \"ClientVersion\": \"${CLIENT_VERSION}\",
            \"Mirrors\": [{
              \"DownloadUrl\": \"${R2_FRONT}/${{ steps.generate-filename.outputs.build_name }}\",
              \"Hash\": \"${FILE_HASH}\"
            }]
          }" > ./release.json

          # Everything below this line has been commented out for saftey. This is a safety measure to prevent accidental
          # uploads to the R2 bucket WHICH WILL OVERWRITE THE EXISTING RELEASE AND PUSH IT TO THE LIVE LAUNCHER.
          # The if statement for this step will need to be adjusted as well.

          echo "Current Local Directory:"
          ls -lah

          echo "Current Remote Directory:"
          rclone ls r2:${R2_BUCKET_NAME} --config ./rclone.conf

          # Remove old .7z files from the bucket
          rclone lsf r2:${R2_BUCKET_NAME} --config ./rclone.conf --files-only --include="*.7z" --absolute > files-to-remove.txt
          echo "Files to be deleted:"
          cat files-to-remove.txt
          rclone delete r2:${R2_BUCKET_NAME} --config ./rclone.conf --files-from=files-to-remove.txt --max-depth=1 -vv

          # Upload the .7z file using rclone with the above config
          rclone copy "./${{ steps.generate-filename.outputs.build_name }}" r2:${R2_BUCKET_NAME} --config ./rclone.conf -vv

          # Upload the JSON file using rclone with the above config
          rclone copy "./release.json" r2:${R2_BUCKET_NAME} --config ./rclone.conf -vv

          echo "R2 Upload completed."

      - name: Upload Release to HTTPS Source
        id: upload-https-7z
        shell: bash
        run: |
          sshpass -p "${{ secrets.SFTP_PASSWORD }}" scp -v -o "Port=${{ secrets.SFTP_PORT }}" -o "ConnectTimeout=20" -o "StrictHostKeyChecking=no" "${{ steps.generate-filename.outputs.build_name }}" ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }}:/public/builds
          echo "link_https=${{ secrets.SFTP_MIRROR_LINK }}/builds/${{ steps.generate-filename.outputs.build_name }}" >> $GITHUB_OUTPUT
          echo "HTTPS Upload completed: ${{ secrets.SFTP_MIRROR_LINK }}/builds/${{ steps.generate-filename.outputs.build_name }}"

      - name: Post Build Info to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_SHARP_URL }}
          BUILD_TYPE: ${{ needs.prepare.outputs.build_type }}
          BASE_NAME: ${{ steps.generate-filename.outputs.base_name }}
          BUILD_NAME: ${{ steps.generate-filename.outputs.build_name }}
          FILE_SIZE_MB: ${{ steps.compress-release.outputs.file_size_mb }}
          FILE_HASH: ${{ steps.compress-release.outputs.file_hash }}
          LINK_HTTPS: ${{ steps.upload-https-7z.outputs.link_https }}
        shell: bash
        run: |
          UPPER_BUILD_TYPE=$(echo "$BUILD_TYPE" | tr '[:lower:]' '[:upper:]')
          FOOTER_MESSAGES=("MadByte asks: is this compatable on Linux?" "You look great today!" "Powered by coffee" "Life's too short to remove USB safely" "Have you tried turning it off and on again?" "In Chomp we trust" "Beep boop, I'm a bot - Waffle" "Keep calm and commit your code" "This isn't a bug, it's an undocumented feature" "Please direct all support requests to Drakia" "Meaw" "If this doesnt work it's because of Alex" "Chomp approves of this message" "Chomp is life, Chomp is love" "Drakia denies all involvement" "Drakia left this note here just to confuse you" "CWX is the reason we can't have nice things" "CWX voted against this message" "Powered by caffeine, chaos, and Chomp" "RaiRai says hi-hi" "RaiRai wants to remind you that sarcasm is a skill" "Refringe just wobbled" "Refringe is watching" "Refringe rewrote this embed thirty times" "Refringe, professional button-pusher extraordinaire" "Sarix would like you to reconsider your choices" "Sarix just gave this embed a 7/10" "Waffle has entered the chat, and now it's weird" "Waffle is busy stacking layers of chaos" "Waffle would like to speak to the manager of logic" "Have you tried our new FAFO bot?" "Say NO to Docker" "Careful, Arch just made something async" "ERR ChatGPT 4 Credits Expired" "We should rename General chat to off-topic" "I'm an advanced AI that cost several billion dollars to train and they have me building test releases" "uwu" "big if true")
          FOOTER_MESSAGE="${FOOTER_MESSAGES[$RANDOM % ${#FOOTER_MESSAGES[@]}]}"
          TIMESTAMP=$(date --iso-8601=seconds)
          MODS=""

          if [ "$BUILD_TYPE" == "BLEEDINGEDGE" ]; then
            EMBED_COLOR=15548997
            EMBED_DESCRIPTION='A new bleeding edge build is available. These are strictly for testing issues *and not for general gameplay*. 7-Zip is *required* to extract the release. The download link is temporary.'
            MODS='disabled'
          elif [ "$BUILD_TYPE" == "BLEEDINGEDGEMODS" ]; then
            EMBED_COLOR=15548997
            EMBED_DESCRIPTION='A new bleeding edge build is available. These are strictly for testing issues *and not for general gameplay*. 7-Zip is *required* to extract the release. The download link is temporary.'
            MODS='enabled'
          elif [ "$BUILD_TYPE" == "DEBUG" ]; then
            EMBED_COLOR=2123412
            EMBED_DESCRIPTION=$'A new debug build is available. These have extra-verbose logging enabled *for testing*. 7-Zip is *required* to extract the release. The download link is temporary.'
            MODS='enabled'
          else
            EMBED_COLOR=5763719
            EMBED_DESCRIPTION=$'A new *release* build has been published. Get to testing, nerds.'
            MODS='enabled'
          fi

          fields_json='[
            {"name": "Name", "value": "'"$BASE_NAME"'"},
            {"name": "Build Type", "value": "'"$BUILD_TYPE"'", "inline": true},
            {"name": "Mods", "value": "'"$MODS"'", "inline": true},
            {"name": "File Size", "value": "'"$FILE_SIZE_MB"'", "inline": true},
            {"name": "File Hash", "value": "'"$FILE_HASH"'"},
            {"name": "Download", "value": "'"$LINK_HTTPS"'"}
          ]'

          payload=$(jq -n \
            --argjson fields "$fields_json" \
            --arg EMBED_DESCRIPTION "$EMBED_DESCRIPTION" \
            --argjson EMBED_COLOR "$EMBED_COLOR" \
            --arg FOOTER_MESSAGE "$FOOTER_MESSAGE" \
            --arg TIMESTAMP "$TIMESTAMP" \
            '{
              "content": $EMBED_DESCRIPTION,
              "embeds": [
                {
                  "title": "Build Information",
                  "color": $EMBED_COLOR,
                  "fields": $fields,
                  "footer": {"text": $FOOTER_MESSAGE, "icon_url": "https://i.imgur.com/28JJJec.png"},
                  "timestamp": $TIMESTAMP
                }
              ],
              "username": "BuildBot",
              "avatar_url": "https://i.imgur.com/28JJJec.png"
            }')
          echo "$payload" > payload_discord.json

          echo "Payload Generated:"
          cat payload_discord.json

          echo "Sending Payload..."
          curl -H "Content-Type: application/json" \
            -X POST \
            --data-binary @payload_discord.json \
            $DISCORD_WEBHOOK_URL
